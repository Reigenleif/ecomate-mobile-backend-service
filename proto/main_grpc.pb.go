// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: proto/main.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Emoji_GetEmoji_FullMethodName    = "/Emoji/GetEmoji"
	Emoji_CreateEmoji_FullMethodName = "/Emoji/CreateEmoji"
	Emoji_UpdateEmoji_FullMethodName = "/Emoji/UpdateEmoji"
	Emoji_DeleteEmoji_FullMethodName = "/Emoji/DeleteEmoji"
)

// EmojiClient is the client API for Emoji service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmojiClient interface {
	GetEmoji(ctx context.Context, in *GetEmojiRequest, opts ...grpc.CallOption) (*EmojiResponse, error)
	CreateEmoji(ctx context.Context, in *CreateEmojiRequest, opts ...grpc.CallOption) (*EmojiResponse, error)
	UpdateEmoji(ctx context.Context, in *UpdateEmojiRequest, opts ...grpc.CallOption) (*EmojiResponse, error)
	DeleteEmoji(ctx context.Context, in *DeleteEmojiRequest, opts ...grpc.CallOption) (*EmojiResponse, error)
}

type emojiClient struct {
	cc grpc.ClientConnInterface
}

func NewEmojiClient(cc grpc.ClientConnInterface) EmojiClient {
	return &emojiClient{cc}
}

func (c *emojiClient) GetEmoji(ctx context.Context, in *GetEmojiRequest, opts ...grpc.CallOption) (*EmojiResponse, error) {
	out := new(EmojiResponse)
	err := c.cc.Invoke(ctx, Emoji_GetEmoji_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emojiClient) CreateEmoji(ctx context.Context, in *CreateEmojiRequest, opts ...grpc.CallOption) (*EmojiResponse, error) {
	out := new(EmojiResponse)
	err := c.cc.Invoke(ctx, Emoji_CreateEmoji_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emojiClient) UpdateEmoji(ctx context.Context, in *UpdateEmojiRequest, opts ...grpc.CallOption) (*EmojiResponse, error) {
	out := new(EmojiResponse)
	err := c.cc.Invoke(ctx, Emoji_UpdateEmoji_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emojiClient) DeleteEmoji(ctx context.Context, in *DeleteEmojiRequest, opts ...grpc.CallOption) (*EmojiResponse, error) {
	out := new(EmojiResponse)
	err := c.cc.Invoke(ctx, Emoji_DeleteEmoji_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmojiServer is the server API for Emoji service.
// All implementations must embed UnimplementedEmojiServer
// for forward compatibility
type EmojiServer interface {
	GetEmoji(context.Context, *GetEmojiRequest) (*EmojiResponse, error)
	CreateEmoji(context.Context, *CreateEmojiRequest) (*EmojiResponse, error)
	UpdateEmoji(context.Context, *UpdateEmojiRequest) (*EmojiResponse, error)
	DeleteEmoji(context.Context, *DeleteEmojiRequest) (*EmojiResponse, error)
	mustEmbedUnimplementedEmojiServer()
}

// UnimplementedEmojiServer must be embedded to have forward compatible implementations.
type UnimplementedEmojiServer struct {
}

func (UnimplementedEmojiServer) GetEmoji(context.Context, *GetEmojiRequest) (*EmojiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmoji not implemented")
}
func (UnimplementedEmojiServer) CreateEmoji(context.Context, *CreateEmojiRequest) (*EmojiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEmoji not implemented")
}
func (UnimplementedEmojiServer) UpdateEmoji(context.Context, *UpdateEmojiRequest) (*EmojiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmoji not implemented")
}
func (UnimplementedEmojiServer) DeleteEmoji(context.Context, *DeleteEmojiRequest) (*EmojiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEmoji not implemented")
}
func (UnimplementedEmojiServer) mustEmbedUnimplementedEmojiServer() {}

// UnsafeEmojiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmojiServer will
// result in compilation errors.
type UnsafeEmojiServer interface {
	mustEmbedUnimplementedEmojiServer()
}

func RegisterEmojiServer(s grpc.ServiceRegistrar, srv EmojiServer) {
	s.RegisterService(&Emoji_ServiceDesc, srv)
}

func _Emoji_GetEmoji_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmojiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmojiServer).GetEmoji(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Emoji_GetEmoji_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmojiServer).GetEmoji(ctx, req.(*GetEmojiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Emoji_CreateEmoji_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEmojiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmojiServer).CreateEmoji(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Emoji_CreateEmoji_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmojiServer).CreateEmoji(ctx, req.(*CreateEmojiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Emoji_UpdateEmoji_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmojiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmojiServer).UpdateEmoji(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Emoji_UpdateEmoji_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmojiServer).UpdateEmoji(ctx, req.(*UpdateEmojiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Emoji_DeleteEmoji_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEmojiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmojiServer).DeleteEmoji(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Emoji_DeleteEmoji_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmojiServer).DeleteEmoji(ctx, req.(*DeleteEmojiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Emoji_ServiceDesc is the grpc.ServiceDesc for Emoji service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Emoji_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Emoji",
	HandlerType: (*EmojiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEmoji",
			Handler:    _Emoji_GetEmoji_Handler,
		},
		{
			MethodName: "CreateEmoji",
			Handler:    _Emoji_CreateEmoji_Handler,
		},
		{
			MethodName: "UpdateEmoji",
			Handler:    _Emoji_UpdateEmoji_Handler,
		},
		{
			MethodName: "DeleteEmoji",
			Handler:    _Emoji_DeleteEmoji_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/main.proto",
}

const (
	AuthService_Login_FullMethodName       = "/AuthService/Login"
	AuthService_Register_FullMethodName    = "/AuthService/Register"
	AuthService_GoogleLogin_FullMethodName = "/AuthService/GoogleLogin"
)

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*UserResponse, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*UserResponse, error)
	GoogleLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*UserResponse, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, AuthService_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, AuthService_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GoogleLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, AuthService_GoogleLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility
type AuthServiceServer interface {
	Login(context.Context, *LoginRequest) (*UserResponse, error)
	Register(context.Context, *RegisterRequest) (*UserResponse, error)
	GoogleLogin(context.Context, *LoginRequest) (*UserResponse, error)
	mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServiceServer struct {
}

func (UnimplementedAuthServiceServer) Login(context.Context, *LoginRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthServiceServer) Register(context.Context, *RegisterRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAuthServiceServer) GoogleLogin(context.Context, *LoginRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoogleLogin not implemented")
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GoogleLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GoogleLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GoogleLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GoogleLogin(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _AuthService_Login_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _AuthService_Register_Handler,
		},
		{
			MethodName: "GoogleLogin",
			Handler:    _AuthService_GoogleLogin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/main.proto",
}

const (
	NewsService_GetNewsList_FullMethodName        = "/NewsService/GetNewsList"
	NewsService_GetNewsCommentList_FullMethodName = "/NewsService/GetNewsCommentList"
	NewsService_CreateNewsComment_FullMethodName  = "/NewsService/CreateNewsComment"
	NewsService_UpdateNewsComment_FullMethodName  = "/NewsService/UpdateNewsComment"
	NewsService_DeleteNewsComment_FullMethodName  = "/NewsService/DeleteNewsComment"
)

// NewsServiceClient is the client API for NewsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NewsServiceClient interface {
	GetNewsList(ctx context.Context, in *GetNewsListRequest, opts ...grpc.CallOption) (*NewsListResponse, error)
	GetNewsCommentList(ctx context.Context, in *GetNewsCommentListRequest, opts ...grpc.CallOption) (*NewsCommentListResponse, error)
	CreateNewsComment(ctx context.Context, in *CreateNewsCommentRequest, opts ...grpc.CallOption) (*GeneralStatusResponse, error)
	UpdateNewsComment(ctx context.Context, in *UpdateNewsCommentRequest, opts ...grpc.CallOption) (*GeneralStatusResponse, error)
	DeleteNewsComment(ctx context.Context, in *DeleteNewsCommentRequest, opts ...grpc.CallOption) (*GeneralStatusResponse, error)
}

type newsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNewsServiceClient(cc grpc.ClientConnInterface) NewsServiceClient {
	return &newsServiceClient{cc}
}

func (c *newsServiceClient) GetNewsList(ctx context.Context, in *GetNewsListRequest, opts ...grpc.CallOption) (*NewsListResponse, error) {
	out := new(NewsListResponse)
	err := c.cc.Invoke(ctx, NewsService_GetNewsList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsServiceClient) GetNewsCommentList(ctx context.Context, in *GetNewsCommentListRequest, opts ...grpc.CallOption) (*NewsCommentListResponse, error) {
	out := new(NewsCommentListResponse)
	err := c.cc.Invoke(ctx, NewsService_GetNewsCommentList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsServiceClient) CreateNewsComment(ctx context.Context, in *CreateNewsCommentRequest, opts ...grpc.CallOption) (*GeneralStatusResponse, error) {
	out := new(GeneralStatusResponse)
	err := c.cc.Invoke(ctx, NewsService_CreateNewsComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsServiceClient) UpdateNewsComment(ctx context.Context, in *UpdateNewsCommentRequest, opts ...grpc.CallOption) (*GeneralStatusResponse, error) {
	out := new(GeneralStatusResponse)
	err := c.cc.Invoke(ctx, NewsService_UpdateNewsComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsServiceClient) DeleteNewsComment(ctx context.Context, in *DeleteNewsCommentRequest, opts ...grpc.CallOption) (*GeneralStatusResponse, error) {
	out := new(GeneralStatusResponse)
	err := c.cc.Invoke(ctx, NewsService_DeleteNewsComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NewsServiceServer is the server API for NewsService service.
// All implementations must embed UnimplementedNewsServiceServer
// for forward compatibility
type NewsServiceServer interface {
	GetNewsList(context.Context, *GetNewsListRequest) (*NewsListResponse, error)
	GetNewsCommentList(context.Context, *GetNewsCommentListRequest) (*NewsCommentListResponse, error)
	CreateNewsComment(context.Context, *CreateNewsCommentRequest) (*GeneralStatusResponse, error)
	UpdateNewsComment(context.Context, *UpdateNewsCommentRequest) (*GeneralStatusResponse, error)
	DeleteNewsComment(context.Context, *DeleteNewsCommentRequest) (*GeneralStatusResponse, error)
	mustEmbedUnimplementedNewsServiceServer()
}

// UnimplementedNewsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNewsServiceServer struct {
}

func (UnimplementedNewsServiceServer) GetNewsList(context.Context, *GetNewsListRequest) (*NewsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewsList not implemented")
}
func (UnimplementedNewsServiceServer) GetNewsCommentList(context.Context, *GetNewsCommentListRequest) (*NewsCommentListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewsCommentList not implemented")
}
func (UnimplementedNewsServiceServer) CreateNewsComment(context.Context, *CreateNewsCommentRequest) (*GeneralStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewsComment not implemented")
}
func (UnimplementedNewsServiceServer) UpdateNewsComment(context.Context, *UpdateNewsCommentRequest) (*GeneralStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNewsComment not implemented")
}
func (UnimplementedNewsServiceServer) DeleteNewsComment(context.Context, *DeleteNewsCommentRequest) (*GeneralStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNewsComment not implemented")
}
func (UnimplementedNewsServiceServer) mustEmbedUnimplementedNewsServiceServer() {}

// UnsafeNewsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NewsServiceServer will
// result in compilation errors.
type UnsafeNewsServiceServer interface {
	mustEmbedUnimplementedNewsServiceServer()
}

func RegisterNewsServiceServer(s grpc.ServiceRegistrar, srv NewsServiceServer) {
	s.RegisterService(&NewsService_ServiceDesc, srv)
}

func _NewsService_GetNewsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNewsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).GetNewsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NewsService_GetNewsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).GetNewsList(ctx, req.(*GetNewsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsService_GetNewsCommentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNewsCommentListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).GetNewsCommentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NewsService_GetNewsCommentList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).GetNewsCommentList(ctx, req.(*GetNewsCommentListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsService_CreateNewsComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNewsCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).CreateNewsComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NewsService_CreateNewsComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).CreateNewsComment(ctx, req.(*CreateNewsCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsService_UpdateNewsComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNewsCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).UpdateNewsComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NewsService_UpdateNewsComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).UpdateNewsComment(ctx, req.(*UpdateNewsCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsService_DeleteNewsComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNewsCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).DeleteNewsComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NewsService_DeleteNewsComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).DeleteNewsComment(ctx, req.(*DeleteNewsCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NewsService_ServiceDesc is the grpc.ServiceDesc for NewsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NewsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "NewsService",
	HandlerType: (*NewsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNewsList",
			Handler:    _NewsService_GetNewsList_Handler,
		},
		{
			MethodName: "GetNewsCommentList",
			Handler:    _NewsService_GetNewsCommentList_Handler,
		},
		{
			MethodName: "CreateNewsComment",
			Handler:    _NewsService_CreateNewsComment_Handler,
		},
		{
			MethodName: "UpdateNewsComment",
			Handler:    _NewsService_UpdateNewsComment_Handler,
		},
		{
			MethodName: "DeleteNewsComment",
			Handler:    _NewsService_DeleteNewsComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/main.proto",
}

const (
	User_GetUser_FullMethodName    = "/User/GetUser"
	User_CreateUser_FullMethodName = "/User/CreateUser"
	User_UpdateUser_FullMethodName = "/User/UpdateUser"
)

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UserResponse, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, User_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, User_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, User_UpdateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	GetUser(context.Context, *GetUserRequest) (*UserResponse, error)
	CreateUser(context.Context, *CreateUserRequest) (*UserResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UserResponse, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) GetUser(context.Context, *GetUserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserServer) CreateUser(context.Context, *CreateUserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserServer) UpdateUser(context.Context, *UpdateUserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _User_GetUser_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _User_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _User_UpdateUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/main.proto",
}
